{"ast":null,"code":"var _jsxFileName = \"/Users/seangong/WebstormProjects/Spotify/client/src/TracksComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport OpenAI from \"openai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst openai = new OpenAI({\n  apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n  dangerouslyAllowBrowser: true\n});\nfunction TracksComponent() {\n  _s();\n  const [userTracks, setUserTracks] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [chatGPTResponses, setChatGPTResponses] = useState({});\n  const fetchUserIds = async () => {\n    try {\n      const url = 'http://localhost:3001/user-ids';\n      const response = await axios.get(url);\n      if (response.data.length === 0) {\n        throw new Error(\"No users found. Please log in.\");\n      }\n      return response.data;\n    } catch (err) {\n      setError(err.message);\n      setLoading(false);\n      return [];\n    }\n  };\n  const fetchTracks = async userId => {\n    try {\n      const url = `http://localhost:3001/get-tracks/${userId}`;\n      const response = await axios.get(url);\n      return {\n        userId,\n        tracks: response.data\n      };\n    } catch (err) {\n      setError(`Failed to fetch tracks for user ${userId}`);\n      console.log(err);\n      return null;\n    }\n  };\n  const fetchChatGPTResponse = async (userId, tracks) => {\n    try {\n      const messages = tracks.map(track => `${track.name} by ${track.artist}`).join(\", \");\n      const completion = await openai.chat.completions.create({\n        messages: [{\n          role: \"system\",\n          content: `Describe these tracks: ${messages}`\n        }],\n        model: \"gpt-3.5-turbo\"\n      });\n      return {\n        userId,\n        response: completion.choices[0].message.content\n      };\n    } catch (err) {\n      console.log(err);\n      return {\n        userId,\n        response: \"Error generating response.\"\n      };\n    }\n  };\n  useEffect(() => {\n    setLoading(true);\n    fetchUserIds().then(userIds => {\n      Promise.all(userIds.map(userId => fetchTracks(userId))).then(results => {\n        Promise.all(results.filter(result => result).map(result => fetchChatGPTResponse(result.userId, result.tracks))).then(responses => {\n          setChatGPTResponses(responses.reduce((acc, cur) => {\n            acc[cur.userId] = cur.response;\n            return acc;\n          }, {}));\n          setLoading(false);\n        });\n      });\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 23\n  }, this);\n  const displayContent = Object.entries(chatGPTResponses).map(([userId, response]) => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"User: \", userId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: response\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, userId, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top Tracks Analysis by ChatGPT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), displayContent.length > 0 ? displayContent : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 59\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n}\n_s(TracksComponent, \"t36sEN0GXrsrwwff5zyc5IwLN0Q=\");\n_c = TracksComponent;\nexport default TracksComponent;\nvar _c;\n$RefreshReg$(_c, \"TracksComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","OpenAI","jsxDEV","_jsxDEV","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","TracksComponent","_s","userTracks","setUserTracks","loading","setLoading","error","setError","chatGPTResponses","setChatGPTResponses","fetchUserIds","url","response","get","data","length","Error","err","message","fetchTracks","userId","tracks","console","log","fetchChatGPTResponse","messages","map","track","name","artist","join","completion","chat","completions","create","role","content","model","choices","then","userIds","Promise","all","results","filter","result","responses","reduce","acc","cur","children","fileName","_jsxFileName","lineNumber","columnNumber","displayContent","Object","entries","_c","$RefreshReg$"],"sources":["/Users/seangong/WebstormProjects/Spotify/client/src/TracksComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport OpenAI from \"openai\";\n\nconst openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY, dangerouslyAllowBrowser: true });\n\nfunction TracksComponent() {\n    const [userTracks, setUserTracks] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [chatGPTResponses, setChatGPTResponses] = useState({});\n\n    const fetchUserIds = async () => {\n        try {\n            const url = 'http://localhost:3001/user-ids';\n            const response = await axios.get(url);\n            if (response.data.length === 0) {\n                throw new Error(\"No users found. Please log in.\");\n            }\n            return response.data;\n        } catch (err) {\n            setError(err.message);\n            setLoading(false);\n            return [];\n        }\n    };\n\n    const fetchTracks = async (userId) => {\n        try {\n            const url = `http://localhost:3001/get-tracks/${userId}`;\n            const response = await axios.get(url);\n            return {\n                userId,\n                tracks: response.data\n            };\n        } catch (err) {\n            setError(`Failed to fetch tracks for user ${userId}`);\n            console.log(err);\n            return null;\n        }\n    };\n\n    const fetchChatGPTResponse = async (userId, tracks) => {\n        try {\n            const messages = tracks.map(track => `${track.name} by ${track.artist}`).join(\", \");\n            const completion = await openai.chat.completions.create({\n                messages: [{ role: \"system\", content: `Describe these tracks: ${messages}` }],\n                model: \"gpt-3.5-turbo\",\n            });\n            return { userId, response: completion.choices[0].message.content };\n        } catch (err) {\n            console.log(err);\n            return { userId, response: \"Error generating response.\" };\n        }\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        fetchUserIds().then(userIds => {\n            Promise.all(userIds.map(userId => fetchTracks(userId)))\n                .then(results => {\n                    Promise.all(results.filter(result => result).map(result =>\n                        fetchChatGPTResponse(result.userId, result.tracks)\n                    )).then(responses => {\n                        setChatGPTResponses(responses.reduce((acc, cur) => {\n                            acc[cur.userId] = cur.response;\n                            return acc;\n                        }, {}));\n                        setLoading(false);\n                    });\n                });\n        });\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    const displayContent = Object.entries(chatGPTResponses).map(([userId, response]) => (\n        <div key={userId}>\n            <h2>User: {userId}</h2>\n            <p>{response}</p>\n        </div>\n    ));\n\n    return (\n        <div>\n            <h1>Top Tracks Analysis by ChatGPT</h1>\n            {displayContent.length > 0 ? displayContent : <p>No data available.</p>}\n        </div>\n    );\n}\n\nexport default TracksComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}