{"ast":null,"code":"var _jsxFileName = \"/Users/seangong/WebstormProjects/Spotify/client/src/TracksComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport OpenAI from \"openai\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction TracksComponent() {\n  _s();\n  const [userTracks, setUserTracks] = useState({});\n  const [processedContent, setProcessedContent] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const openai = new OpenAI({\n    apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    dangerouslyAllowBrowser: true\n  });\n\n  // Function to process the displayContent using ChatGPT\n  const processTracksWithChatGPT = async tracksByUser => {\n    try {\n      // Formatting the tracks for each user into a single message string\n      const playlistDescriptions = Object.entries(tracksByUser).map(([userId, tracks], index) => {\n        return `User ${userId} playlist: ` + tracks.map(track => `${track.name} by ${track.artist}`).join(', ');\n      });\n\n      // Creating a comparative prompt for ChatGPT\n      if (playlistDescriptions.length > 1) {\n        const prompt = `Here are the playlists of two users:\\n- ${playlistDescriptions[0]}\\n- ${playlistDescriptions[1]}\\nCan you compare the taste of these two users based on their playlists?`;\n        const completion = await openai.chat.completions.create({\n          messages: [{\n            role: \"system\",\n            content: prompt\n          }],\n          model: \"gpt-3.5-turbo\"\n        });\n        return completion.choices[0].message.content;\n      } else {\n        return \"Not enough data to compare two users.\";\n      }\n    } catch (err) {\n      console.error(\"Failed to process tracks with ChatGPT\", err);\n      return \"Failed to process tracks with ChatGPT\";\n    }\n  };\n  useEffect(() => {\n    setLoading(true);\n    fetchUserIds().then(userIds => {\n      Promise.all(userIds.map(userId => fetchTracks(userId))).then(results => {\n        const tracksByUser = results.reduce((acc, result) => {\n          if (result) {\n            // Check if result is not null\n            acc[result.userId] = result.tracks;\n          }\n          return acc;\n        }, {});\n        setUserTracks(tracksByUser);\n        return tracksByUser;\n      }).then(tracksByUser => {\n        processTracksWithChatGPT(tracksByUser).then(processedText => {\n          setProcessedContent(processedText);\n          setLoading(false);\n        });\n      });\n    });\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Top Tracks by User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: processedContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(TracksComponent, \"rpwTMjPh9guwENa2old2BZoERmQ=\");\n_c = TracksComponent;\nexport default TracksComponent;\nvar _c;\n$RefreshReg$(_c, \"TracksComponent\");","map":{"version":3,"names":["React","useState","useEffect","axios","OpenAI","jsxDEV","_jsxDEV","TracksComponent","_s","userTracks","setUserTracks","processedContent","setProcessedContent","loading","setLoading","error","setError","openai","apiKey","process","env","REACT_APP_OPENAI_API_KEY","dangerouslyAllowBrowser","processTracksWithChatGPT","tracksByUser","playlistDescriptions","Object","entries","map","userId","tracks","index","track","name","artist","join","length","prompt","completion","chat","completions","create","messages","role","content","model","choices","message","err","console","fetchUserIds","then","userIds","Promise","all","fetchTracks","results","reduce","acc","result","processedText","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seangong/WebstormProjects/Spotify/client/src/TracksComponent.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport OpenAI from \"openai\";\n\nfunction TracksComponent() {\n    const [userTracks, setUserTracks] = useState({});\n    const [processedContent, setProcessedContent] = useState(\"\");\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    const openai = new OpenAI({ apiKey: process.env.REACT_APP_OPENAI_API_KEY, dangerouslyAllowBrowser: true });\n\n    // Function to process the displayContent using ChatGPT\n    const processTracksWithChatGPT = async (tracksByUser) => {\n        try {\n            // Formatting the tracks for each user into a single message string\n            const playlistDescriptions = Object.entries(tracksByUser).map(([userId, tracks], index) => {\n                return `User ${userId} playlist: ` + tracks.map(track => `${track.name} by ${track.artist}`).join(', ');\n            });\n\n            // Creating a comparative prompt for ChatGPT\n            if (playlistDescriptions.length > 1) {\n                const prompt = `Here are the playlists of two users:\\n- ${playlistDescriptions[0]}\\n- ${playlistDescriptions[1]}\\nCan you compare the taste of these two users based on their playlists?`;\n                const completion = await openai.chat.completions.create({\n                    messages: [{ role: \"system\", content: prompt }],\n                    model: \"gpt-3.5-turbo\",\n                });\n                return completion.choices[0].message.content;\n            } else {\n                return \"Not enough data to compare two users.\";\n            }\n        } catch (err) {\n            console.error(\"Failed to process tracks with ChatGPT\", err);\n            return \"Failed to process tracks with ChatGPT\";\n        }\n    };\n\n    useEffect(() => {\n        setLoading(true);\n        fetchUserIds().then(userIds => {\n            Promise.all(userIds.map(userId => fetchTracks(userId)))\n                .then(results => {\n                    const tracksByUser = results.reduce((acc, result) => {\n                        if (result) {  // Check if result is not null\n                            acc[result.userId] = result.tracks;\n                        }\n                        return acc;\n                    }, {});\n                    setUserTracks(tracksByUser);\n                    return tracksByUser;\n                })\n                .then(tracksByUser => {\n                    processTracksWithChatGPT(tracksByUser).then(processedText => {\n                        setProcessedContent(processedText);\n                        setLoading(false);\n                    });\n                });\n        });\n    }, []);\n\n    if (loading) return <div>Loading...</div>;\n    if (error) return <div>Error: {error}</div>;\n\n    return (\n        <div>\n            <h1>Top Tracks by User</h1>\n            <div>{processedContent}</div>\n        </div>\n    );\n}\n\nexport default TracksComponent;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}